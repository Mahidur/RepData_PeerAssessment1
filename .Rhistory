library(swirl)
ls()
rm(list=ls())
swirl()
%+7
5 +7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
add2 <- function(x,y) {
x + y}
}
add2 <- function(x,y) {
x + y
}
add2 (2, 3)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n=10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y)b {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
cube <- function(x, n) {}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x>5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 4
f(3)
x <- 5
y <- if(x <3) {
NA
} else {
10
}
y
library(datasets)
datasets(iris)
dataset(iris)
data(iris)
head(iris)
dim(iris)
levels(iris$Species)
xSL <- subset(x, x[ , "Species"]== "virginica")
x <- iris
xSL <- subset(x, x[ , "Species"]== "virginica")
mxSL <- mean(xSL$Sepal.Length)
mxSL
apply(iris[ , 1:4], 2, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
source('~/Desktop/Data Science Course/swirl/my mean.R')
my_mean(6,7,8)
source('~/Desktop/Data Science Course/swirl/my mean.R')
my_mean(6,7,8)
source('~/Desktop/Data Science Course/swirl/my mean.R')
my_mean(6,7,8)
source('~/Desktop/Data Science Course/swirl/my mean.R')
my_mean(6,7,8)
source('~/Desktop/Data Science Course/swirl/my mean.R')
my_mean(6,7,8)
]\=.
?sum
source('~/Desktop/Data Science Course/swirl/my mean.R')
my_mean(6,7,8)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%     ### <Your call to group_by()> %>%
mutate(total = sum(count)%>%
mutate(prop = count / total) %>%
print
}
library("knitr")
setwd("~/RepData_PeerAssessment1")
setwd("~/user/mrahman/RepData_PeerAssessment1")
unzip("repdata-data-activity.zip", exdir =".", unzip = "internal", setTimes = TRUE)
myfile <- read.csv("activity.csv")
library(dplyr)
library(ggplot2)
mytable <- myfile %>% group_by(date, interval) %>% summarise(steps= sum(steps))
p1 <- ggplot(data = mytable) +
aes(x = date, y = steps)+
geom_histogram(stat = "identity", fill = "black")
p1 + theme(axis.text.x = element_text(angle = 45))
meanstepspd <- mytable %>% group_by(date) %>% summarise(steps= mean(steps))
summary(meanstepspd)
```
## The mean steps per day is 10766 and median is 10765.
## What is the average daily activity pattern?
## Average steps taken per day
mytable2 <- myfile %>% group_by(interval, date) %>% summarise(steps = mean(steps))
plot(mytable2$interval, mytable2$steps, xlab = "interval", ylab = "mean steps per day",  type = "l")
summary(mytable2)
##  as in the summary of mytable2, we get the maximum number of steps taken in an interval is 806. It is confirmed by
```{r, echo = TRUE}
mytable2 <- myfile %>% group_by(interval, date) %>% summarise(steps = mean(steps))
max_steps <- max(mytable2$steps, na.rm = TRUE)
max_steps
```
## The corresponding 5-minute interval is 615, as detected by :
```{r. echo= TRUE}
mytable2$interval[match(806, mytable2$steps)]
```
## Imputing missing values
For simplicity, the missing values for the steps are replaced with the mean steps/interval as follows
```{r, echo = TRUE}
newtable <- mytable ## makes a copy the original data
replacement <- mean(mytable$steps, na.rm = TRUE) ## calculates the mean for steps to be used as replacement
newtable$steps[is.na(newtable$steps)] <- replacement ## replaces the missing values with the replacement value
miss_val <- sum(is.na(newtable$steps))  ## to confirm there is no missing value
miss_val
p2 <- ggplot(data = newtable) +             ## plotting the histogram
aes(x = date, y = steps)+
geom_histogram(stat = "identity", fill = "black")
p2 + theme(axis.text.x = element_text(angle = 45))
```
## The mean and median steps are
```{r, echo= TRUE}
newmeansteps <- mean(newtable$steps)
newmediansteps <- median(newtable$steps)
print(c(newmeansteps,newmediansteps))
```
## to compare the mean, median and other features in the two tables
```{r, echo = TRUE}
summary(mytable)
summary(newtable)
```
## The mean steps per day is 10766 and median is 10766.
## There is no change in the mean. The median changes by 1 step only.
## There is no significant impact for imputing the missing data on the estimates of the total daily number of steps.
Are there differences in activity patterns between weekdays and weekends?
```{r, echo = TRUE}
datetable <- mutate(newtable, day= as.Date(date))
stepsdate <- select(datetable, interval, steps, day)
stepsdateday <- mutate(stepsdate, WEEKDAY = weekdays(day))
stepsdateday$WEEKDAY <- factor(stepsdateday$WEEKDAY)
days <- list(weekend = c("Saturday", "Sunday"), weekday= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
levels(stepsdateday$WEEKDAY) <-days
weekdayactivity <- stepsdateday %>% group_by(interval, WEEKDAY) %>% summarise(steps = mean(steps))
meanweekdayactivity <- weekdayactivity %>% group_by(WEEKDAY) %>% summarise(steps = mean(steps))
meanweekdayactivity
```
## Average number of steps taken in weekend is 42.366 and the same on weekday is 35.610. A slightly higher activity in the weekend.
```{r, echo = TRUE}
par(mfrow = c(2, 1))
plot(mytable$interval, mytable$steps, xlab = "interval", ylab = "mean steps per day",  type = "l")
plot(weekdayactivity$interval, weekdayactivity$steps, xlab = "interval", ylab = "mean steps per day",  type = "l")
```
source('~/Desktop/Data_Science_Course/Reproducible Research/PeerAssessment 1/plot1.R')
